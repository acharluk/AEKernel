--[[ AEKernel Drawing API ]]--

local _w, _h = term.getSize()
local _bgcolor = colors.black
local _txcolor = colors.white
local _cursorx = 1
local _cursory = 1

--[[
	Getters
]]--

--[[ Get width ]]--
function gw()
	return _w
end

--[[ Get height ]]--
function gh()
	return _h
end

--[[ Get cursor x ]]--
function gcx()
	return _cursorx
end

--[[ Get cursor y ]]--
function gcy()
	return _cursory
end

--[[ Get cursor position ]]--
function gcp()
	return term.getCursorPos()
end

--[[ Get text color ]]--
function gtc()
	return _txcolor
end

--[[ Get background color ]]--
function gbc()
	return _bgcolor
end

--[[
	Setters
]]--
--[[ Set cursor position ]]--
function scp(x, y)
	if x ~= nil and x > 0 then _cursorx = x end
	if y ~= nil and y > 0 then _cursory = y end
	term.setCursorPos(_cursorx, _cursory)
end

--[[ Get cursor x ]]--
function scx(x)
	_cursorx = x
	scp(_cursorx, _cursory)
end

--[[ Set cursor y ]]--
function scx(y)
	_cursory = y
	scp(_cursorx, _cursory)
end

--[[ Set text color ]]--
function stc(col)
	_txcolor = col
	term.setTextColor(_txcolor)
end
--[[ Set background color ]]--
function sbc(col)
	_bgcolor = col
	term.setBackgroundColor(_bgcolor)
end

--[[
	Drawing
]]--
--[[ Clear screen and set cursor position ]]--
function cls(x, y)
	term.clear()
	scp(x, y)
end

--[[ Draw pixel ]]--
function draw_px(x, y, bgcol, txcol, str)
	oldx, oldy = gcp()
	paintutils.drawPixel(x, y, bgcol)
	scp(x, y)
	write(str)
	scp(oldx, oldy)
end

--[[ Draw line ]]--
function draw_ln(minx, miny, maxx, maxy, color)
	oldx, oldy = gcp()
	paintutils.drawLine(minx, miny, maxx, maxy, color)
	scp(oldx, oldy)
end

--[[ Draw rectangle ]]--
function draw_rect(minx, miny, maxx, maxy, filled, color)
	oldColor = _bgcolor
	oldx, oldy = gcp()
	if filled then
		paintutils.drawFilledBox(minx, miny, maxx, maxy, color)
	elseif not filled then
		paintutils.drawBox(minx, miny, maxx, maxy, color)
	end
	sbc(oldColor)
	scp(oldx, oldy)
end

--[[ Draw string ]]--
function draw_str(x, y, str)
	oldx, oldy = gcp()
	if x > 0 and y > 0 then
		scp(math.floor(x), math.floor(y))
	else
		scp(math.floor(w / 2 - #str / 2), math.floor(h / 2))
	end
	write(str)
	scp(oldx, oldy)
end

--[[ Draw coloured string ]]--
function draw_str_col(x, y, str, txcol, bgcol)
	oldtxcol = _txcolor
	oldbgcol = _bgcolor
	stc(txcol)
	sbc(bgcol)
	draw_str(x, y, str)
	stc(oldtxcol)
	sbc(oldbgcol)
end